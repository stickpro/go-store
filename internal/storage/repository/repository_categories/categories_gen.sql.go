// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories_gen.sql

package repository_categories

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/stickpro/go-store/internal/models"
)

const create = `-- name: Create :one
INSERT INTO categories (parent_id, name, slug, description, meta_title, meta_h1, meta_description, meta_keyword, is_enable, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
	RETURNING id, parent_id, name, slug, description, meta_title, meta_h1, meta_description, meta_keyword, is_enable, created_at, updated_at
`

type CreateParams struct {
	ParentID        uuid.NullUUID    `db:"parent_id" json:"parent_id"`
	Name            string           `db:"name" json:"name"`
	Slug            string           `db:"slug" json:"slug"`
	Description     pgtype.Text      `db:"description" json:"description"`
	MetaTitle       pgtype.Text      `db:"meta_title" json:"meta_title"`
	MetaH1          pgtype.Text      `db:"meta_h1" json:"meta_h1"`
	MetaDescription pgtype.Text      `db:"meta_description" json:"meta_description"`
	MetaKeyword     pgtype.Text      `db:"meta_keyword" json:"meta_keyword"`
	IsEnable        bool             `db:"is_enable" json:"is_enable"`
	CreatedAt       pgtype.Timestamp `db:"created_at" json:"created_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Category, error) {
	row := q.db.QueryRow(ctx, create,
		arg.ParentID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.MetaTitle,
		arg.MetaH1,
		arg.MetaDescription,
		arg.MetaKeyword,
		arg.IsEnable,
		arg.CreatedAt,
	)
	var i models.Category
	err := row.Scan(
		&i.ID,
		&i.ParentID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.MetaTitle,
		&i.MetaH1,
		&i.MetaDescription,
		&i.MetaKeyword,
		&i.IsEnable,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
