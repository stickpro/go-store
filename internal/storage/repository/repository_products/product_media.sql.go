// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: product_media.sql

package repository_products

import (
	"context"

	"github.com/google/uuid"
	"github.com/stickpro/go-store/internal/models"
)

const createProductMedia = `-- name: CreateProductMedia :exec
INSERT INTO product_media (product_id, media_id, sort_order)
VALUES ($1, $2, $3) ON CONFLICT DO NOTHING
`

type CreateProductMediaParams struct {
	ProductID uuid.UUID `db:"product_id" json:"product_id"`
	MediaID   uuid.UUID `db:"media_id" json:"media_id"`
	SortOrder int32     `db:"sort_order" json:"sort_order"`
}

func (q *Queries) CreateProductMedia(ctx context.Context, arg CreateProductMediaParams) error {
	_, err := q.db.Exec(ctx, createProductMedia, arg.ProductID, arg.MediaID, arg.SortOrder)
	return err
}

const deleteProductMedia = `-- name: DeleteProductMedia :exec
DELETE FROM product_media WHERE product_id = $1
`

func (q *Queries) DeleteProductMedia(ctx context.Context, productID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductMedia, productID)
	return err
}

const getMediaByProductID = `-- name: GetMediaByProductID :many
SELECT m.id, m.name, m.path, m.file_name, m.mime_type, m.disk_type, m.size, m.created_at
FROM product_media pm
         JOIN media m ON pm.media_id = m.id
WHERE pm.product_id = $1
ORDER BY pm.sort_order
`

func (q *Queries) GetMediaByProductID(ctx context.Context, productID uuid.UUID) ([]*models.Medium, error) {
	rows, err := q.db.Query(ctx, getMediaByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Medium{}
	for rows.Next() {
		var i models.Medium
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.FileName,
			&i.MimeType,
			&i.DiskType,
			&i.Size,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
