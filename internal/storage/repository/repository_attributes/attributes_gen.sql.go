// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: attributes_gen.sql

package repository_attributes

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/stickpro/go-store/internal/models"
)

const create = `-- name: Create :one
INSERT INTO attributes (attribute_group_id, name, value, type, is_filterable, is_visible, sort_order, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, $7, now())
	RETURNING id, attribute_group_id, name, value, type, is_filterable, is_visible, sort_order, created_at, updated_at
`

type CreateParams struct {
	AttributeGroupID uuid.NullUUID `db:"attribute_group_id" json:"attribute_group_id"`
	Name             string        `db:"name" json:"name"`
	Value            string        `db:"value" json:"value"`
	Type             string        `db:"type" json:"type"`
	IsFilterable     pgtype.Bool   `db:"is_filterable" json:"is_filterable"`
	IsVisible        pgtype.Bool   `db:"is_visible" json:"is_visible"`
	SortOrder        pgtype.Int4   `db:"sort_order" json:"sort_order"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Attribute, error) {
	row := q.db.QueryRow(ctx, create,
		arg.AttributeGroupID,
		arg.Name,
		arg.Value,
		arg.Type,
		arg.IsFilterable,
		arg.IsVisible,
		arg.SortOrder,
	)
	var i models.Attribute
	err := row.Scan(
		&i.ID,
		&i.AttributeGroupID,
		&i.Name,
		&i.Value,
		&i.Type,
		&i.IsFilterable,
		&i.IsVisible,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM attributes WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, attribute_group_id, name, value, type, is_filterable, is_visible, sort_order, created_at, updated_at FROM attributes ORDER BY sort_order DESC LIMIT $1 OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]*models.Attribute, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Attribute{}
	for rows.Next() {
		var i models.Attribute
		if err := rows.Scan(
			&i.ID,
			&i.AttributeGroupID,
			&i.Name,
			&i.Value,
			&i.Type,
			&i.IsFilterable,
			&i.IsVisible,
			&i.SortOrder,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE attributes
	SET attribute_group_id=$1, name=$2, value=$3, type=$4, is_filterable=$5, is_visible=$6, 
		sort_order=$7, updated_at=now()
	WHERE id=$8
	RETURNING id, attribute_group_id, name, value, type, is_filterable, is_visible, sort_order, created_at, updated_at
`

type UpdateParams struct {
	AttributeGroupID uuid.NullUUID `db:"attribute_group_id" json:"attribute_group_id"`
	Name             string        `db:"name" json:"name"`
	Value            string        `db:"value" json:"value"`
	Type             string        `db:"type" json:"type"`
	IsFilterable     pgtype.Bool   `db:"is_filterable" json:"is_filterable"`
	IsVisible        pgtype.Bool   `db:"is_visible" json:"is_visible"`
	SortOrder        pgtype.Int4   `db:"sort_order" json:"sort_order"`
	ID               uuid.UUID     `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.Attribute, error) {
	row := q.db.QueryRow(ctx, update,
		arg.AttributeGroupID,
		arg.Name,
		arg.Value,
		arg.Type,
		arg.IsFilterable,
		arg.IsVisible,
		arg.SortOrder,
		arg.ID,
	)
	var i models.Attribute
	err := row.Scan(
		&i.ID,
		&i.AttributeGroupID,
		&i.Name,
		&i.Value,
		&i.Type,
		&i.IsFilterable,
		&i.IsVisible,
		&i.SortOrder,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
