// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: personal_access_tokens_gen.sql

package repository_personal_access_tokens

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/stickpro/go-store/internal/models"
)

const create = `-- name: Create :one
INSERT INTO personal_access_tokens (tokenable_type, tokenable_id, name, token, expires_at, created_at)
	VALUES ($1, $2, $3, $4, $5, $6)
	RETURNING id, tokenable_type, tokenable_id, name, token, last_used_at, expires_at, created_at, updated_at
`

type CreateParams struct {
	TokenableType string           `db:"tokenable_type" json:"tokenable_type"`
	TokenableID   uuid.UUID        `db:"tokenable_id" json:"tokenable_id"`
	Name          string           `db:"name" json:"name"`
	Token         string           `db:"token" json:"token"`
	ExpiresAt     *time.Time       `db:"expires_at" json:"expires_at"`
	CreatedAt     pgtype.Timestamp `db:"created_at" json:"created_at"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.PersonalAccessToken, error) {
	row := q.db.QueryRow(ctx, create,
		arg.TokenableType,
		arg.TokenableID,
		arg.Name,
		arg.Token,
		arg.ExpiresAt,
		arg.CreatedAt,
	)
	var i models.PersonalAccessToken
	err := row.Scan(
		&i.ID,
		&i.TokenableType,
		&i.TokenableID,
		&i.Name,
		&i.Token,
		&i.LastUsedAt,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
