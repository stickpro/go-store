// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: media_gen.sql

package repository_media

import (
	"context"

	"github.com/google/uuid"
	"github.com/stickpro/go-store/internal/models"
)

const create = `-- name: Create :one
INSERT INTO media (name, path, file_name, mime_type, disk_type, size, created_at)
	VALUES ($1, $2, $3, $4, $5, $6, now())
	RETURNING id, name, path, file_name, mime_type, disk_type, size, created_at
`

type CreateParams struct {
	Name     string `db:"name" json:"name"`
	Path     string `db:"path" json:"path"`
	FileName string `db:"file_name" json:"file_name"`
	MimeType string `db:"mime_type" json:"mime_type"`
	DiskType string `db:"disk_type" json:"disk_type"`
	Size     int64  `db:"size" json:"size"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Medium, error) {
	row := q.db.QueryRow(ctx, create,
		arg.Name,
		arg.Path,
		arg.FileName,
		arg.MimeType,
		arg.DiskType,
		arg.Size,
	)
	var i models.Medium
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.FileName,
		&i.MimeType,
		&i.DiskType,
		&i.Size,
		&i.CreatedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM media WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}
