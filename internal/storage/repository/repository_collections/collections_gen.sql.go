// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: collections_gen.sql

package repository_collections

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/stickpro/go-store/internal/models"
)

const create = `-- name: Create :one
INSERT INTO collections (name, description, slug, created_at)
	VALUES ($1, $2, $3, now())
	RETURNING id, name, description, slug, created_at, updated_at
`

type CreateParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Slug        string      `db:"slug" json:"slug"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (*models.Collection, error) {
	row := q.db.QueryRow(ctx, create, arg.Name, arg.Description, arg.Slug)
	var i models.Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const delete = `-- name: Delete :exec
DELETE FROM collections WHERE id=$1
`

func (q *Queries) Delete(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, name, description, slug, created_at, updated_at FROM collections WHERE id=$1 LIMIT 1
`

func (q *Queries) Get(ctx context.Context, id uuid.UUID) (*models.Collection, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i models.Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getAll = `-- name: GetAll :many
SELECT id, name, description, slug, created_at, updated_at FROM collections LIMIT $1 OFFSET $2
`

type GetAllParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]*models.Collection, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.Collection{}
	for rows.Next() {
		var i models.Collection
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :one
UPDATE collections
	SET name=$1, description=$2, slug=$3, updated_at=now()
	WHERE id=$4
	RETURNING id, name, description, slug, created_at, updated_at
`

type UpdateParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Slug        string      `db:"slug" json:"slug"`
	ID          uuid.UUID   `db:"id" json:"id"`
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) (*models.Collection, error) {
	row := q.db.QueryRow(ctx, update,
		arg.Name,
		arg.Description,
		arg.Slug,
		arg.ID,
	)
	var i models.Collection
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
