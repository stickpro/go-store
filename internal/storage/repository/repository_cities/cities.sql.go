// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: cities.sql

package repository_cities

import (
	"context"

	"github.com/stickpro/go-store/internal/models"
)

const getByCity = `-- name: GetByCity :many
SELECT id, address, postal_code, country, federal_district, region_type, region, area_type, area, city_type, city, settlement_type, settlement, kladr_id, fias_id, fias_level, capital_marker, okato, oktmo, tax_office, timezone, geo_lat, geo_lon, population, foundation_year FROM cities WHERE city=$1 or region=$1
`

func (q *Queries) GetByCity(ctx context.Context, city string) ([]*models.City, error) {
	rows, err := q.db.Query(ctx, getByCity, city)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.City{}
	for rows.Next() {
		var i models.City
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.PostalCode,
			&i.Country,
			&i.FederalDistrict,
			&i.RegionType,
			&i.Region,
			&i.AreaType,
			&i.Area,
			&i.CityType,
			&i.City,
			&i.SettlementType,
			&i.Settlement,
			&i.KladrID,
			&i.FiasID,
			&i.FiasLevel,
			&i.CapitalMarker,
			&i.Okato,
			&i.Oktmo,
			&i.TaxOffice,
			&i.Timezone,
			&i.GeoLat,
			&i.GeoLon,
			&i.Population,
			&i.FoundationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCityOrderByPopulation = `-- name: GetCityOrderByPopulation :many
SELECT id, address, postal_code, country, federal_district, region_type, region, area_type, area, city_type, city, settlement_type, settlement, kladr_id, fias_id, fias_level, capital_marker, okato, oktmo, tax_office, timezone, geo_lat, geo_lon, population, foundation_year FROM cities ORDER BY population DESC LIMIT 20
`

func (q *Queries) GetCityOrderByPopulation(ctx context.Context) ([]*models.City, error) {
	rows, err := q.db.Query(ctx, getCityOrderByPopulation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*models.City{}
	for rows.Next() {
		var i models.City
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.PostalCode,
			&i.Country,
			&i.FederalDistrict,
			&i.RegionType,
			&i.Region,
			&i.AreaType,
			&i.Area,
			&i.CityType,
			&i.City,
			&i.SettlementType,
			&i.Settlement,
			&i.KladrID,
			&i.FiasID,
			&i.FiasLevel,
			&i.CapitalMarker,
			&i.Okato,
			&i.Oktmo,
			&i.TaxOffice,
			&i.Timezone,
			&i.GeoLat,
			&i.GeoLon,
			&i.Population,
			&i.FoundationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
